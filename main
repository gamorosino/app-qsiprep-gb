#!/bin/bash
## stuff from jobheader.sh
#PBS -N qsiprep

set -x
set -e

export FREESURFER_LICENSE="hayashis@iu.edu 29511 *CPmh9xvKQKHE FSg0ijTusqaQc"
echo $FREESURFER_LICENSE > license.txt

bl2bids

WORKDIRNAME=$(pwd)/qsipworkdir
outdir=$(pwd)/output

dwi=$(jq -r .dwi config.json)
space=$(jq -r .output_space config.json)
resolution=$(jq -r .output_resolution config.json)
sub=$(jq -r '._inputs[0].meta.subject' config.json)
skipbidsvalidation=$(jq -r .skipbidsvalidation config.json)
denoise_method=$(jq -r .denoise_method config.json)
distortion_group_merge=$(jq -r .distortion_group_merge config.json)
unringing_method=$(jq -r .unringing_method config.json)
hmc_transform=$(jq -r .hmc_transform config.json)
infant=$(jq -r .infant config.json)
syn_sdc=$(jq -r .syn_sdc config.json)
force_syn=$(jq -r .force_syn config.json)
check_flip_bvecs=$(jq -r .check_flip_bvecs config.json)
b1_biascorrect_stage=$(jq -r .b1_biascorrect_stage config.json)
hmc_model=$(jq -r .hmc_model config.json)
pepolar_method=$(jq -r .pepolar_method config.json)

optional=""

# multi-DWI merge option
if [[ $dwi == *","* ]]; then 
    echo "Multi DWI input found. Distortion group merge option: ${distortion_group_merge}"
    optional="$optional --distortion-group-merge ${distortion_group_merge}"
fi

# spatial normalization
if [[ $space == "MNI152NLin2009cAsym" ]]; then
    echo "Performing normalization to MNI152NLin2009cAsym space."
    optional="$optional --anatomical-template MNI152NLin2009cAsym"
fi

# boolean options
[ $skipbidsvalidation == "true" ] && optional="$optional --skip-bids-validation"
[ $infant == "true" ] && optional="$optional --infant"

# --- Handle BidsGuess renaming safely ---
dwi_use_bidsguess=$(jq -r .dwi_use_bidsguess config.json)
if [[ $dwi_use_bidsguess == "true" ]]; then
    echo "Using BidsGuess renaming (handles single/multi-session + unique names)."
    find bids/sub-$sub -type f -path "*/dwi/*.json" -print0 | while IFS= read -r -d '' json; do
        guess=$(jq -r '.BidsGuess[1] // empty' "$json")
        base=$(basename "$json" .json)
        dir=$(dirname "$json")

        if [[ -z "$guess" || "$guess" == "null" ]]; then
            echo "Skipping $base â€” no valid BidsGuess found."
            continue
        fi

        echo "Renaming $base files with BidsGuess: $guess"
        for fn in "$dir"/$base.*; do
            suffix=${fn#*.}
            target="$dir/sub-${sub}${guess}.${suffix}"

            # ensure unique name if file exists
            if [[ -e "$target" ]]; then
                count=1
                while [[ -e "$dir/sub-${sub}${guess}_run-${count}.${suffix}" ]]; do
                    ((count++))
                done
                target="$dir/sub-${sub}${guess}_run-${count}.${suffix}"
                echo "File exists, renaming to $target"
            fi

            mv "$fn" "$target"
        done
    done
fi

# clean work/output dirs
rm -rf $WORKDIRNAME && mkdir -p $WORKDIRNAME
rm -rf $outdir && mkdir -p $outdir

# avoid templateflow problems on HPCs
mkdir -p templateflow
export SINGULARITYENV_TEMPLATEFLOW_HOME=$PWD/templateflow

# FreeSurfer license check
[ -z "$FREESURFER_LICENSE" ] && echo "Please set FREESURFER_LICENSE in .bashrc" && exit 1;

# quick visual check
tree bids

# --- Run QSIPrep ---
time singularity exec -e \
    docker://pennbbl/qsiprep:0.24.0 \
    qsiprep \
    --fs-license-file license.txt \
    --anat-modality T1w \
    --output-resolution $resolution \
    --denoise-method $denoise_method \
    --unringing-method $unringing_method \
    --hmc-transform $hmc_transform \
    --hmc-model $hmc_model \
    --b1-biascorrect-stage $b1_biascorrect_stage \
    --pepolar-method $pepolar_method \
    --nthreads 8 \
    --verbose \
    --work-dir $WORKDIRNAME \
    --stop-on-first-crash \
    $optional \
    bids $outdir participant

echo "done with qsiprep! - now organizing output"
./qsiprep2bl.sh

echo "all done!"
